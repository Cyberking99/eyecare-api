generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EyeTestType {
  VISUAL_ACUITY
  COLOR_BLINDNESS
  ASTIGMATISM
  CONTRAST_SENSITIVITY
}

model User {
  id                String               @id @default(cuid())
  fullname          String
  email             String               @unique
  phone             String?              @unique
  passwordHash      String
  dateRegistered    DateTime             @default(now())
  age               Int?
  eyeConditions     String[]             @default([])
  preferences       Json?
  chatConversations Conversation[]
  chatMessages      ChatMessage[]
  scans             Scan[]
  exercises         ExerciseCompletion[]
  tests             EyeTestResult[]
  refreshTokens     RefreshToken[]
  reminders         Reminder[]
  deletedAt         DateTime?
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model Conversation {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  title     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  ChatMessage[]
}

model ChatMessage {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?
  role           String // "user" | "assistant" | "system"
  content        String
  metadata       Json?
  createdAt      DateTime     @default(now())
}

model Scan {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  publicId     String // Cloudinary public_id
  url          String
  format       String?
  aiSummary    String?
  aiFindings   Json?
  comparedWith String? // previous scan id
  createdAt    DateTime @default(now())
}

model Exercise {
  id          String               @id @default(cuid())
  title       String
  description String?
  tags        String[]             @default([])
  config      Json?
  completions ExerciseCompletion[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model ExerciseCompletion {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  String
  completedAt DateTime @default(now())
  durationSec Int?
  score       Int?
}

model EyeTestTemplate {
  id        String          @id @default(cuid())
  name      String
  type      EyeTestType
  config    Json?
  results   EyeTestResult[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model EyeTestResult {
  id         String          @id @default(cuid())
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  template   EyeTestTemplate @relation(fields: [templateId], references: [id])
  templateId String
  rawData    Json
  score      Float?
  remarks    String?
  createdAt  DateTime        @default(now())
}

model Reminder {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  kind      String // "exercise" | "test"
  targetId  String?
  cron      String? // or ISO time rules
  nextAt    DateTime?
  createdAt DateTime  @default(now())
}
